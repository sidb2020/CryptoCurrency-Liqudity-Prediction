# -*- coding: utf-8 -*-
"""App ML Project Sid.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1upjA-7BrBhrT1S0EBv3dCU8QbJR05JsK
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install streamlit

import streamlit as st
import pandas as pd
import joblib

# Set the path to your model files in Google Drive
MODEL_PATH = "/content/drive/MyDrive/PW Assignments/models/trained_model.pkl"
SCALER_PATH = "/content/drive/MyDrive/PW Assignments/models/scaler.pkl"

# Load the trained model and scaler
model = joblib.load(MODEL_PATH)
scaler = joblib.load(SCALER_PATH)

# Streamlit page setup
st.set_page_config(page_title="Crypto Liquidity Predictor")
st.title("Cryptocurrency Liquidity Prediction App")
st.write("Enter the cryptocurrency market data below to predict its **liquidity level**.")

# Input features
volume = st.number_input("Total Volume (USD)", min_value=0.0, format="%.2f")
market_cap = st.number_input("Market Cap (USD)", min_value=0.0, format="%.2f")
price_change_pct = st.number_input("Price Change Percentage (24h)", format="%.2f")
current_price = st.number_input("Current Price (USD)", min_value=0.0, format="%.2f")

# Predict button
if st.button("Predict Liquidity Level"):
    try:
        # Compute derived features
        liquidity_ratio = volume / market_cap if market_cap > 0 else 0
        price_change_ratio = price_change_pct / current_price if current_price > 0 else 0

        # Create DataFrame for model input
        input_data = pd.DataFrame([[
            volume,
            market_cap,
            liquidity_ratio,
            price_change_ratio
        ]], columns=["total_volume", "market_cap", "liquidity_ratio", "price_change_ratio"])

        # Scale features
        input_scaled = scaler.transform(input_data)

        # Make prediction
        prediction = model.predict(input_scaled)[0]

        # Display result
        st.success(f"Predicted Liquidity Level: **{prediction}**")

    except Exception as e:
        st.error(f"Error during prediction: {e}")